# standard library imports
import datetime
import queue
from abc import ABCMeta, abstractmethod

# local package imports
from .event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a Portfolio and
    the ultimate set of Fill objects that actually occur in the
    market. 

    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing
        a Fill event that gets placed onto the Events queue.

        Parameters:
        event - Contains an Event object with order information.
        """
        raise NotImplementedError("Should implement execute_order()")
    
# TODO: increase the complexity of fill simulator to include slipage and market impact
class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order
    objects into their equivalent fill objects automatically
    without latency, slippage or fill-ratio issues.

    This allows a straightforward "first go" test of any strategy,
    before implementation with a more sophisticated execution
    handler.
    """
    
    def __init__(self, events, slippage=0.0, market_impact=0.0):
        """
        Initialises the handler, setting the event queues
        up internally.

        Parameters:
        events - The Queue of Event objects.
        """
        self.events = events
        self.slippage = slippage
        self.market_impact = market_impact

    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects naively,
        i.e. without any latency, slippage or fill ratio problems.

        Parameters:
        event - Contains an Event object with order information.
        """
        if event.type == 'ORDER':
            # Get the market data for the symbol and date
            market_data = event.symbol

            # Calculate the execution price with slippage and market impact
            execution_price = event.price
            market_open_price = market_data['open']
            market_close_price = market_data['close']
            
            # Apply slippage
            execution_price += (execution_price * self.slippage)
            
            # Calculate market impact as a percentage change from open to close
            market_impact_percentage = ((execution_price - market_open_price) / market_open_price) * 100
            
            # Apply market impact
            execution_price += (market_impact_percentage / 100) * execution_price
            
            fill_event = FillEvent(datetime.datetime.now(), event.symbol,
                                   'Backtest', event.quantity, execution_price)
            self.events.put(fill_event)